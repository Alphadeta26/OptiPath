#include <iostream>
#include <climits>
using namespace std;

#define MAX 100
#define INF INT_MAX

int minDistance(int dist[], bool processed[], int vertices) {
    int min = INF, min_index;
    for (int v = 0; v < vertices; v++)
        if (!processed[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    return min_index;
}

void dijkstra(int graph[MAX][MAX], int source, int vertices) {
    int dist[MAX];
    bool processed[MAX] = {false};
    for (int i = 0; i < vertices; i++) {
        dist[i] = INF;
    }
    dist[source] = 0;

    for (int count = 0; count < vertices - 1; count++) {
        int u = minDistance(dist, processed, vertices);
        processed[u] = true;
        for (int v = 0; v < vertices; v++) {
            if (!processed[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    cout << "Vertex\tDistance from Source" << endl;
    for (int i = 0; i < vertices; i++) {
        cout << i + 1 << "\t" << dist[i] << endl;
    }
}

int main() {
    int vertices, edges, u, v, weight, source;
    int graph[MAX][MAX] = {0};
    cout << "Enter the number of vertices: ";
    cin >> vertices;
    cout << "Enter the number of edges: ";
    cin >> edges;
    cout << "Enter edges (format: u v weight):" << endl;
    for (int i = 0; i < edges; i++) {
        cin >> u >> v >> weight;
        u--; v--;
        graph[u][v] = weight;
        graph[v][u] = weight;
    }
    cout << "Enter the source vertex: ";
    cin >> source;
    source--;

    dijkstra(graph, source, vertices);
    return 0;
}
